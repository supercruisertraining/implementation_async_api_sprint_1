[flake8]
exclude = .git,__pycache__,.idea,*/venv,README.md,01_schema_design,manage.py,urls.py,01_doker_compose
max-line-length = 150
ignore=D102,D103,D104,D105,D106,D107,WPS407,D100,D101,F401,DAR101,Q000,WPS305,S104,B008,WPS

[mypy]
# Enables PEP 420 style namespace packages.
namespace_packages = False

# Suppresses error messages about imports that cannot be resolved.
ignore_missing_imports = True

# Directs what to do with imports when the imported module is found as a .py file
# and not part of the files, modules and packages provided on the command line.
follow_imports = normal

# Determines whether to respect the follow_imports setting even for stub (.pyi) files.
follow_imports_for_stubs = True

# Enables reporting error messages generated within PEP 561 compliant packages.
no_silence_site_packages = False

# Disallows usage of types that come from unfollowed imports.
disallow_any_unimported = False

# Disallows all expressions in the module that have type Any.
disallow_any_expr = False

# Disallows functions that have Any in their signature after decorator transformation.
disallow_any_decorated = False

# Disallows explicit Any in type positions such as type annotations and generic type parameters.
disallow_any_explicit = False

# Disallows usage of generic types that do not specify explicit type parameters.
disallow_any_generics = False

# Disallows subclassing a value of type Any.
disallow_subclassing_any = False

# Disallows calling functions without type annotations from functions with type annotations.
disallow_untyped_calls = True

# Disallows defining functions without type annotations or with incomplete type annotations.
disallow_untyped_defs = False

# Disallows defining functions with incomplete type annotations.
disallow_incomplete_defs = False

# Type-checks the interior of functions without type annotations.
check_untyped_defs = True

# Reports an error whenever a function with type annotations
# is decorated with a decorator without annotations.
disallow_untyped_decorators = False

# Changes the treatment of arguments with a default value of None
# by not implicitly making their type Optional.
no_implicit_optional = False

# Enables or disables strict Optional checks.
# If False, mypy treats None as compatible with every type.
strict_optional = False

# Warns about casting an expression to its inferred type.
warn_redundant_casts = False

# Warns about unneeded # type: ignore comments.
warn_unused_ignores = True

# Shows errors for missing return statements on some execution paths.
warn_no_return = True

# Shows a warning when returning a value with type Any
# from a function declared with a non- Any return type.
warn_return_any = False

# Shows a warning when encountering any code inferred to be
# unreachable or redundant after performing type analysis.
warn_unreachable = True

# Ignores all non-fatal errors.
ignore_errors = True

# Causes mypy to suppress errors caused by not being able to
# fully infer the types of global and class variables.
allow_untyped_globals = True

# Allows variables to be redefined with an arbitrary type, as long as the redefinition
# is in the same block and nesting level as the original definition.
allow_redefinition = False

# By default, imported values to a module are treated as exported
# and mypy allows other modules to import them.
implicit_reexport = True

# Prohibit equality checks, identity checks, and container checks between non-overlapping types.
strict_equality = True

# Prefixes each error with the relevant context.
show_error_context = True

# Shows column numbers in error messages.
show_column_numbers = True

# Shows error codes in error messages. See Error codes for more information.
show_error_codes = True

# Use visually nicer output in error messages: use soft word wrap,
# show source code snippets, and show error location markers.
pretty = True

# Shows error messages with color enabled.
color_output = True

# Shows a short summary line after error messages.
error_summary = True

# Show absolute paths to files.
show_absolute_path = False

# Enables incremental mode.
incremental = True

# Specifies the location where mypy stores incremental cache info.
cache_dir = .mypy_cache

# Use an SQLite database to store the cache.
sqlite_cache = False

# Include fine-grained dependency information in the cache for the mypy daemon.
cache_fine_grained = False

# Makes mypy use incremental cache data even if it was generated by a different version of mypy.
skip_version_check = False

# Skip cache internal consistency checks based on mtime.
skip_cache_mtime_checks = False